//! Test suite for the Web and headless browsers.

#![cfg(target_arch = "wasm32")]

extern crate wasm_bindgen_test;
use std::assert_eq;

use curve25519_scalarmult_wasm::scalarMultiply;
use wasm_bindgen_test::*;

wasm_bindgen_test_configure!(run_in_browser);

#[wasm_bindgen_test]
fn pass() {
    assert_eq!(1 + 1, 2);

    let point_hex = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef, 0xde, 0xad,
        0xbe, 0xef,
    ];
    let scalar_hex = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x91,
        0x57, 0xcc, 0x50, 0x12, 0xde, 0x59, 0x15, 0x68, 0x08, 0x0f, 0xf8, 0x10, 0x81, 0x02, 0xdd,
        0xef, 0xa9,
    ];

    let expected = [
        0xdb, 0x93, 0xe6, 0x8c, 0x1b, 0xa1, 0x21, 0x28, 0x8d, 0x9a, 0xe8, 0x6d, 0x10, 0x3f, 0x8a,
        0xb3, 0xa1, 0x54, 0x52, 0x1f, 0x8c, 0xe9, 0xdd, 0x34, 0xc5, 0x02, 0xfc, 0x00, 0x15, 0xf9,
        0x0f, 0xa2,
    ];

    let actual = scalarMultiply(&point_hex, &scalar_hex);
    assert_eq!(actual, expected);
}
